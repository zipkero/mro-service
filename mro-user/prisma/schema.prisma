// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id         String    @id @default(cuid())
  name       String    @db.VarChar(50)
  businessId String?   @db.VarChar(50)
  phone      String    @db.VarChar(20)
  email      String    @db.VarChar(100)
  address    String    @db.Text
  isActive   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  accounts   Account[]

  @@index([name])
  @@index([email])
  @@index([isActive])
}

model Account {
  id          String        @id @default(cuid())
  name        String
  email       String        @unique
  company     Company?      @relation(fields: [companyId], references: [id])
  companyId   String?
  isActive    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       User[]
  AccountRole AccountRole[]

  @@index([companyId])
  @@index([isActive])
}

enum RoleType {
  SYSTEM
  BUSINESS
  CUSTOM
}

model Role {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  type        RoleType
  permission  Json
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  AccountRole AccountRole[]
  UserRole    UserRole[]

  @@index([type])
  @@index([isActive])
}

model AccountRole {
  id        String   @id @default(cuid())
  accountId String
  roleId    String
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Restrict)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Restrict)
  createdAt DateTime @default(now())

  @@unique([accountId, roleId])
  @@index([accountId])
  @@index([roleId])
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Restrict)
  createdAt DateTime @default(now())

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String
  hphone    String
  lastLogin DateTime?
  isActive  Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Account   Account?   @relation(fields: [accountId], references: [id], onDelete: Restrict)
  accountId String?
  UserRole  UserRole[]

  @@index([accountId])
  @@index([email])
  @@index([isActive])
}
